/**
 * STRING_COMPETITION STRING_YEAR - STRING_TRADE - STRING_TITLE
 * Frontend - Task 1
 *
 * This file contains the unit tests performed on the frontend task.
 * You may look at the test cases but not modify them.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 */

import {
    formatString,
    camelCaseString,
    prepareFiltersForCopy,
    parseFiltersFromCopy,
    copyFiltersToClipboard,
    removeFilterElement,
    applyFilters,
    imageDataToGrayscaleImageData,
    grayscaleImageDataToImageData,
    applyKernel,
} from '../../src/task.js'

describe('formatString', () => {
    it('can format a simple string', () => {
        expect(formatString('sharpen')).to.equal('Sharpen')
    })

    it('can format a complex string', () => {
        expect(formatString('laplacianOfGaussian')).to.equal('Laplacian Of Gaussian')
    })

    it('can format a string with a number', () => {
        expect(formatString('identity3')).to.equal('Identity 3')
    })
})

describe('camelCaseString', () => {
    it('can convert a simple string to camel case', () => {
        expect(camelCaseString('Sharpen')).to.equal('sharpen')
    })

    it('can convert a complex string to camel case', () => {
        expect(camelCaseString('Laplacian Of Gaussian')).to.equal('laplacianOfGaussian')
    })

    it('can convert a string with a number to camel case', () => {
        expect(camelCaseString('Identity 3')).to.equal('identity3')
    })
})

describe('prepareFiltersForCopy', () => {
    it('can prepare a list of filters for copy', () => {
        const filters = ['sharpen', 'boxBlur', 'darken']

        expect(prepareFiltersForCopy(filters)).to.deep.equal('Sharpen, Box Blur, Darken')
    })
})

describe('parseFiltersFromCopy', () => {
    it('can parse a list of filters from a copied string', () => {
        const filters = 'Sharpen, Box Blur, Darken'

        expect(parseFiltersFromCopy(filters)).to.deep.equal(['sharpen', 'boxBlur', 'darken'])
    })
})

describe('copyFiltersToClipboard', () => {
    it('can copy a list of filters to the clipboard', () => {
        const spy = cy.spy(navigator.clipboard, 'writeText')

        const filters = ['sharpen', 'boxBlur', 'darken']

        copyFiltersToClipboard(filters)

        expect(spy).to.be.calledWith('Sharpen, Box Blur, Darken')
    })
})

describe('removeFilterElement', () => {
    it('can remove a filter li at a specific index', () => {
        const filterList = document.createElement('ul')
        filterList.innerHTML = `
            <li class="filter">filter 1</li>
            <li class="filter">filter 2</li>
            <li class="filter">filter 3</li>
        `

        removeFilterElement(filterList, 2)

        expect(filterList.innerHTML).to.equal(`
            <li class="filter">filter 1</li>
            <li class="filter">filter 2</li>
            
        `)
    })

    it('can remove a filter li at a specific index with noise', () => {
        const filterList = document.createElement('ul')
        filterList.innerHTML = `
            <template><li class="filter">filter template</li></template>
            <li class="filter">filter 1</li>
            <li class="filter">filter 2</li>
            <li class="filter">filter 3</li>
            <li class="add-filter">add filter</li>
        `

        removeFilterElement(filterList, 1)

        expect(filterList.innerHTML).to.equal(`
            <template><li class="filter">filter template</li></template>
            <li class="filter">filter 1</li>
            
            <li class="filter">filter 3</li>
            <li class="add-filter">add filter</li>
        `)
    })
})

describe('applyFilters', () => {
    it('calls a callback for each filter', () => {
        const imageData = 2
        const filters = ['darken', 'boxBlur', 'brighten']

        const callback = cy.stub().callsFake((imageData, filter) => imageData * 2)

        const processedImageData = applyFilters(imageData, filters, callback)

        expect(callback).to.have.callCount(3)
        expect(callback.getCall(0).args).to.deep.equal([2, 'darken'])
        expect(callback.getCall(1).args).to.deep.equal([4, 'boxBlur'])
        expect(callback.getCall(2).args).to.deep.equal([8, 'brighten'])
        expect(processedImageData).to.equal(16)
    })
})

describe('imageDataToGrayscaleImageData', () => {
    it('can map rgba image data to grayscale', () => {
        const imageData = [
            [[20, 30, 50, 255], [10, 50, 100, 255], [0, 0, 90, 255],],
            [[255, 255, 250, 255], [200, 215, 140, 255], [101, 103, 105, 255],],
            [[99, 100, 101, 255], [170, 180, 190, 255], [200, 105, 255, 255],],
        ]

        const grayscaleImageData = imageDataToGrayscaleImageData(imageData)

        expect(grayscaleImageData).to.deep.equal([
            [33, 53, 30],
            [253, 185, 103],
            [100, 180, 187],
        ])
    })
})

describe('grayscaleImageDataToImageData', () => {
    it('can map grayscale image data to rgba', () => {
        const grayscaleImageData = [
            [33, 53, 30],
            [253, 185, 103],
            [100, 180, 187],
        ]

        const imageData = grayscaleImageDataToImageData(grayscaleImageData)

        expect(imageData).to.deep.equal([
            [[33,33,33,255],[53,53,53,255],[30,30,30,255],],
            [[253,253,253,255],[185,185,185,255],[103,103,103,255],],
            [[100,100,100,255],[180,180,180,255],[187,187,187,255],]
        ])
    })
})

function testKernel(
    kernel,
    {input, expectedOutput}
) {
    const processedImageData = applyKernel(input, kernel)

    expect(processedImageData).to.deep.equal(expectedOutput)
}

describe('applyKernel', () => {
    it('can apply an identity1 kernel', () => {
        testKernel(
            [
                [1],
            ],
            {
                input: [
                    [126, 179, 127, 154, 233, 249],
                    [35, 189, 250, 232, 253, 246],
                    [76, 96, 194, 137, 202, 255],
                    [23, 47, 101, 143, 75, 180],
                    [151, 3, 92, 145, 94, 76],
                    [198, 153, 62, 56, 65, 123],
                ],
                expectedOutput: [
                    [126, 179, 127, 154, 233, 249],
                    [35, 189, 250, 232, 253, 246],
                    [76, 96, 194, 137, 202, 255],
                    [23, 47, 101, 143, 75, 180],
                    [151, 3, 92, 145, 94, 76],
                    [198, 153, 62, 56, 65, 123],
                ],
            }
        )
    })

    it('can apply an identity3 kernel', () => {
        testKernel(
            [
                [0, 0, 0],
                [0, 1, 0],
                [0, 0, 0],
            ],
            {
                input: [
                    [126, 179, 127, 154, 233, 249],
                    [35, 189, 250, 232, 253, 246],
                    [76, 96, 194, 137, 202, 255],
                    [23, 47, 101, 143, 75, 180],
                    [151, 3, 92, 145, 94, 76],
                    [198, 153, 62, 56, 65, 123],
                ],
                expectedOutput: [
                    [126, 179, 127, 154, 233, 249],
                    [35, 189, 250, 232, 253, 246],
                    [76, 96, 194, 137, 202, 255],
                    [23, 47, 101, 143, 75, 180],
                    [151, 3, 92, 145, 94, 76],
                    [198, 153, 62, 56, 65, 123],
                ],
            }
        )
    })

    it('can apply a darken kernel', () => {
        testKernel(
            [
                [.5],
            ],
            {
                input: [
                    [126, 179, 127, 154, 233, 249],
                    [35, 189, 250, 232, 253, 246],
                    [76, 96, 194, 137, 202, 255],
                    [23, 47, 101, 143, 75, 180],
                    [151, 3, 92, 145, 94, 76],
                    [198, 153, 62, 56, 65, 123],
                ],
                expectedOutput: [
                    [63, 90, 64, 77, 117, 125],
                    [18, 95, 125, 116, 127, 123],
                    [38, 48, 97, 69, 101, 128],
                    [12, 24, 51, 72, 38, 90],
                    [76, 2, 46, 73, 47, 38],
                    [99, 77, 31, 28, 33, 62],
                ],
            }
        )
    })

    it('can apply a brighten kernel', () => {
        testKernel(
            [
                [2],
            ],
            {
                input: [
                    [126, 179, 127, 154, 233, 249],
                    [35, 189, 250, 232, 253, 246],
                    [76, 96, 194, 137, 202, 255],
                    [23, 47, 101, 143, 75, 180],
                    [151, 3, 92, 145, 94, 76],
                    [198, 153, 62, 56, 65, 123],
                ],
                expectedOutput: [
                    [252, 255, 254, 255, 255, 255],
                    [70, 255, 255, 255, 255, 255],
                    [152, 192, 255, 255, 255, 255],
                    [46, 94, 202, 255, 150, 255],
                    [255, 6, 184, 255, 188, 152],
                    [255, 255, 124, 112, 130, 246],
                ],
            }
        )
    })

    it('can apply an outline kernel', () => {
        testKernel(
            [
                [-1, -1, -1],
                [-1, 8, -1],
                [-1, -1, -1],
            ],
            {
                input: [
                    [126, 179, 127, 154, 233, 249],
                    [35, 189, 250, 232, 253, 246],
                    [76, 96, 194, 137, 202, 255],
                    [23, 47, 101, 143, 75, 180],
                    [151, 3, 92, 145, 94, 76],
                    [198, 153, 62, 56, 65, 123],
                ],
                expectedOutput: [
                    [255, 255, 12, 137, 255, 255],
                    [0, 255, 255, 255, 255, 255],
                    [218, 0, 255, 0, 95, 255],
                    [0, 0, 0, 104, 0, 255],
                    [255, 0, 26, 255, 0, 71],
                    [255, 255, 47, 0, 26, 255],
                ],
            }
        )
    })

    it('can apply a sobelLeftRight kernel', () => {
        testKernel(
            [
                [1, 0, -1],
                [2, 0, -2],
                [1, 0, -1],
            ],
            {
                input: [
                    [126, 179, 127, 154, 233, 249],
                    [35, 189, 250, 232, 253, 246],
                    [76, 96, 194, 137, 202, 255],
                    [23, 47, 101, 143, 75, 180],
                    [151, 3, 92, 145, 94, 76],
                    [198, 153, 62, 56, 65, 123],
                ],
                expectedOutput: [
                    [0, 0, 7, 0, 0, 255],
                    [0, 0, 0, 0, 0, 255],
                    [0, 0, 0, 7, 0, 255],
                    [0, 0, 0, 42, 0, 255],
                    [0, 176, 0, 19, 34, 255],
                    [0, 255, 52, 0, 0, 224],
                ],
            }
        )
    })

    it('can apply a sharpen kernel', () => {
        testKernel(
            [
                [0, -1, 0],
                [-1, 5, -1],
                [0, -1, 0],
            ],
            {
                input: [
                    [126, 179, 127, 154, 233, 249],
                    [35, 189, 250, 232, 253, 246],
                    [76, 96, 194, 137, 202, 255],
                    [23, 47, 101, 143, 75, 180],
                    [151, 3, 92, 145, 94, 76],
                    [198, 153, 62, 56, 65, 123],
                ],
                expectedOutput: [
                    [255, 255, 52, 178, 255, 255],
                    [0, 255, 255, 255, 255, 255],
                    [226, 0, 255, 0, 255, 255],
                    [0, 12, 29, 255, 0, 255],
                    [255, 0, 149, 255, 109, 0],
                    [255, 255, 9, 8, 52, 255],
                ],
            }
        )
    })

    it('can apply a boxBlur kernel', () => {
        testKernel(
            [
                [1, 1, 1],
                [1, 1, 1],
                [1, 1, 1],
            ].map(v => v.map(l => l * (1 / 9))),
            {
                input: [
                    [126, 179, 127, 154, 233, 249],
                    [35, 189, 250, 232, 253, 246],
                    [76, 96, 194, 137, 202, 255],
                    [23, 47, 101, 143, 75, 180],
                    [151, 3, 92, 145, 94, 76],
                    [198, 153, 62, 56, 65, 123],
                ],
                expectedOutput: [
                    [59, 101, 126, 139, 152, 109],
                    [78, 141, 173, 198, 218, 160],
                    [52, 112, 154, 176, 191, 135],
                    [44, 87, 106, 131, 145, 98],
                    [64, 92, 89, 93, 106, 68],
                    [56, 73, 57, 57, 62, 40],
                ],
            }
        )
    })

    it('can apply an emboss kernel', () => {
        testKernel(
            [
                [-2, -1, 0],
                [-1, 1, 1],
                [0, 1, 2],
            ],
            {
                input: [
                    [126, 179, 127, 154, 233, 249],
                    [35, 189, 250, 232, 253, 246],
                    [76, 96, 194, 137, 202, 255],
                    [23, 47, 101, 143, 75, 180],
                    [151, 3, 92, 145, 94, 76],
                    [198, 153, 62, 56, 65, 123],
                ],
                expectedOutput: [
                    [255, 255, 255, 255, 255, 255],
                    [255, 255, 255, 255, 255, 0],
                    [254, 204, 0, 0, 38, 0],
                    [151, 64, 193, 0, 0, 0],
                    [255, 128, 213, 0, 0, 0],
                    [200, 0, 0, 0, 0, 0],
                ],
            }
        )
    })

    it('can apply a gaussianBlur kernel', () => {
        testKernel(
            [
                [1, 4, 6, 4, 1],
                [4, 16, 24, 16, 4],
                [6, 24, 36, 24, 6],
                [4, 16, 24, 16, 4],
                [1, 4, 6, 4, 1],
            ].map(v => v.map(l => l * (1 / 256))),
            {
                input: [
                    [126, 179, 127, 154, 233, 249],
                    [35, 189, 250, 232, 253, 246],
                    [76, 96, 194, 137, 202, 255],
                    [23, 47, 101, 143, 75, 180],
                    [151, 3, 92, 145, 94, 76],
                    [198, 153, 62, 56, 65, 123],
                ],
                expectedOutput: [
                    [61, 99, 121, 136, 143, 113],
                    [71, 125, 163, 184, 189, 149],
                    [60, 109, 148, 170, 174, 138],
                    [54, 85, 112, 131, 133, 104],
                    [63, 79, 88, 96, 95, 73],
                    [61, 69, 62, 60, 59, 46],
                ],
            }
        )
    })

    it('can apply an unsharpMasking kernel', () => {
        testKernel(
            [
                [1, 4, 6, 4, 1],
                [4, 16, 24, 16, 4],
                [6, 24, -476, 24, 6],
                [4, 16, 24, 16, 4],
                [1, 4, 6, 4, 1],
            ].map(v => v.map(l => l * (-1 / 256))),
            {
                input: [
                    [126, 179, 127, 154, 233, 249],
                    [35, 189, 250, 232, 253, 246],
                    [76, 96, 194, 137, 202, 255],
                    [23, 47, 101, 143, 75, 180],
                    [151, 3, 92, 145, 94, 76],
                    [198, 153, 62, 56, 65, 123],
                ],
                expectedOutput: [
                    [191, 255, 133, 172, 255, 255],
                    [0, 253, 255, 255, 255, 255],
                    [92, 83, 240, 104, 230, 255],
                    [0, 9, 90, 155, 17, 255],
                    [239, 0, 96, 194, 93, 79],
                    [255, 237, 62, 52, 71, 200],
                ],
            }
        )
    })

    it('can apply a laplacianOfGaussian kernel', () => {
        testKernel(
            [
                [0, 0, -1, 0, 0],
                [0, -1, -2, -1, 0],
                [-1, -2, 16, -2, -1],
                [0, -1, -2, -1, 0],
                [0, 0, -1, 0, 0],
            ],
            {
                input: [
                    [126, 179, 127, 154, 233, 249],
                    [35, 189, 250, 232, 253, 246],
                    [76, 96, 194, 137, 202, 255],
                    [23, 47, 101, 143, 75, 180],
                    [151, 3, 92, 145, 94, 76],
                    [198, 153, 62, 56, 65, 123],
                ],
                expectedOutput: [
                    [255, 255, 0, 212, 255, 255],
                    [0, 255, 255, 255, 255, 255],
                    [201, 0, 255, 0, 255, 255],
                    [0, 0, 0, 255, 0, 255],
                    [255, 0, 12, 255, 0, 0],
                    [255, 255, 0, 0, 136, 255],
                ],
            }
        )
    })
})
