/**
 * !!! DO NOT EDIT THIS FILE !!!
 */

import {
    removeFilterElement,
    applyFilters,
    imageDataToGrayscaleImageData,
    grayscaleImageDataToImageData,
    applyKernel,
    formatString,
    parseFiltersFromCopy,
    copyFiltersToClipboard,
} from '../../src/task.js'

const KERNELS = {
    identity1: [
        [1],
    ],
    identity3: [
        [0, 0, 0],
        [0, 1, 0],
        [0, 0, 0],
    ],
    brighten: [
        [2],
    ],
    darken: [
        [.5],
    ],
    outline: [
        [-1, -1, -1],
        [-1, 8, -1],
        [-1, -1, -1],
    ],
    sobelLeftRight: [
        [1, 0, -1],
        [2, 0, -2],
        [1, 0, -1],
    ],
    sharpen: [
        [0, -1, 0],
        [-1, 5, -1],
        [0, -1, 0],
    ],
    boxBlur: [
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
    ].map(v => v.map(l => l * (1 / 9))),
    emboss: [
        [-2, -1, 0],
        [-1, 1, 1],
        [0, 1, 2],
    ],
    gaussianBlur: [
        [1, 4, 6, 4, 1],
        [4, 16, 24, 16, 4],
        [6, 24, 36, 24, 6],
        [4, 16, 24, 16, 4],
        [1, 4, 6, 4, 1],
    ].map(v => v.map(l => l * (1 / 256))),
    unsharpMasking: [
        [1, 4, 6, 4, 1],
        [4, 16, 24, 16, 4],
        [6, 24, -476, 24, 6],
        [4, 16, 24, 16, 4],
        [1, 4, 6, 4, 1],
    ].map(v => v.map(l => l * (-1 / 256))),
    laplacianOfGaussian: [
        [0, 0, -1, 0, 0],
        [0, -1, -2, -1, 0],
        [-1, -2, 16, -2, -1],
        [0, -1, -2, -1, 0],
        [0, 0, -1, 0, 0],
    ],
}

let src = ''
const filters = []

function applyFilter(imageData, filter) {
    return KERNELS[filter] ? applyKernel(imageData, KERNELS[filter]) : imageData
}

function mapImageDataTo3dArray(imageData) {
    const array = []

    for (let i = 0; i < imageData.data.length; i += 4) {
        const y = Math.floor(i / 4 / imageData.width)
        const x = i / 4 % imageData.width
        array[y] = array[y] ?? []
        array[y][x] = [
            imageData.data[i],
            imageData.data[i + 1],
            imageData.data[i + 2],
            imageData.data[i + 3],
        ]
    }

    return array
}

function map3dArrayToImageData(array) {
    const imageData = new ImageData(array[0].length, array.length)

    for (let y = 0; y < array.length; y++) {
        for (let x = 0; x < array[y].length; x++) {
            const i = (y * imageData.width + x) * 4
            imageData.data[i] = array[y][x][0]
            imageData.data[i + 1] = array[y][x][1]
            imageData.data[i + 2] = array[y][x][2]
            imageData.data[i + 3] = array[y][x][3]
        }
    }

    return imageData
}

function getImageData(src) {
    return new Promise((resolve) => {
        const canvas = document.getElementById('image-before')
        const context = canvas.getContext('2d')
        const image = new Image()
        image.src = src
        image.onload = () => {
            canvas.width = image.naturalWidth
            canvas.height = image.naturalHeight
            context.drawImage(image, 0, 0)

            const imageData = mapImageDataTo3dArray(
                context.getImageData(0, 0, image.naturalWidth, image.naturalHeight)
            )

            context.putImageData(
                map3dArrayToImageData(
                    grayscaleImageDataToImageData(
                        imageDataToGrayscaleImageData(imageData)
                    )
                ), 0, 0
            )

            resolve(imageData)
        }
    })
}

function displayProcessedImageData(processedImageData) {
    const canvas = document.getElementById('image-after')
    canvas.width = processedImageData.width
    canvas.height = processedImageData.height
    const context = canvas.getContext('2d')
    context.putImageData(processedImageData, 0, 0)
}

async function applyFiltersToImageAndDisplay() {
    const imageData = await getImageData(src)
    const grayscaleImageData = imageDataToGrayscaleImageData(imageData)

    const processedGrayscaleImageData = applyFilters(grayscaleImageData, filters, applyFilter)
    const processedImageData = map3dArrayToImageData(
        grayscaleImageDataToImageData(processedGrayscaleImageData)
    )

    displayProcessedImageData(processedImageData)
}

function getSelectedFilter() {
    return document.getElementById('filter').value
}

function resetSelectedFilter() {
    document.getElementById('filter').value = ''
}

function removeFilter(index) {
    filters.splice(index, 1)

    removeFilterElement(document.getElementById('filters'), index)

    applyFiltersToImageAndDisplay()
}

function displayAppliedFilters() {
    const list = document.getElementById('filters')
    list.querySelectorAll('li.filter').forEach(li => li.remove())

    const template = document.querySelector('#filters template')

    filters.forEach(filter => {
        const clone = template.content.cloneNode(true)
        const li = clone.querySelector('li')
        const span = li.querySelector('span')
        const button = li.querySelector('button')

        span.innerText = formatString(filter)
        button.addEventListener('click', () => {
            removeFilter(
                Array.from(list.querySelectorAll('li.filter')).indexOf(li)
            )
        })
        button.setAttribute('aria-label', `Remove ${filter} filter`)

        list.insertBefore(clone, list.querySelector('li:last-child'))
    })
}

function onFilterChange() {
    const filter = getSelectedFilter()

    if (filter) {
        filters.push(filter)
    }

    applyFiltersToImageAndDisplay()
    resetSelectedFilter()
    displayAppliedFilters(filters)
}

function onImageChange(event) {
    const file = event.target.files?.[0]
    src = URL.createObjectURL(file)

    if (src) {
        document.getElementById('intro').classList.add('hidden')
        document.getElementById('app').classList.remove('hidden')

        applyFiltersToImageAndDisplay()
    }
}

function resetHiddenClasses() {
    document.getElementById('app').classList.add('hidden')
    document.getElementById('intro').classList.remove('hidden')
}

function resetFilterOptions() {
    Object.keys(KERNELS).forEach((name) => {
        const option = document.createElement('option')
        option.value = name
        option.innerText = name
        document.getElementById('filter').appendChild(option)
    })
}

function onCopy() {
    copyFiltersToClipboard(filters)
}

function onPaste(event) {
    const string = event.target.value
    filters.splice(
        0,
        filters.length,
        ...parseFiltersFromCopy(string)
    )

    event.target.value = ''
    onFilterChange()
}

function addEventListeners() {
    document.getElementById('image').addEventListener('change', onImageChange)

    document.getElementById('filter').addEventListener('change', onFilterChange)

    document.getElementById('copy').addEventListener('click', onCopy)

    document.getElementById('import').addEventListener('input', onPaste)
}

function init() {
    resetHiddenClasses()

    resetFilterOptions()

    addEventListeners()
}

init()
